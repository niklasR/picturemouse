package picturemouse.backend;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * Some of the code has been generated by StarUML(tm) Java Add-In. This is the 
 * Film class which allows the instantiation of new Films that are allowed to
 * be viewed in the picture mouse cinema.
 * 
 * @version 24/02/2014
 * @author John Every 
 * 
 */
public class BEFilm implements Serializable
{
    /**
     * Integer value representing the unique film identification number.
     */
    private int filmId;
    /**
     * String to store name of film.
     */
    private String name;
    /**
     * File to hold the video trailer.
     */
    private String trailerURL;
    /**
     * String to store synopsis for film.
     */
    private String synopsis;
    /**
     * ArrayList to store all the screenings available for a film.
     */
    private ArrayList<BEScreening> screenings;
    
    public BEFilm(){}
    
    public BEFilm(int filmId, String name, String trailerURL, String synopsis, ArrayList<BEScreening> screenings) {
        this.filmId = filmId;
        this.name = name;
        this.trailerURL = trailerURL;
        this.synopsis = synopsis;
        this.screenings = screenings;
    }
    
    /**
     * Method used primarily to modify all details of a film in the 
     * ModifyFilmDetails class.
     * 
     * @param filmId
     * @param name
     * @param trailerURL
     * @param synopsis
     * @param screenings 
     */
    public void modify(int filmId, String name, String trailerURL, String synopsis, ArrayList<BEScreening> screenings)
    {
        this.filmId = filmId;
        this.name = name;
        this.trailerURL = trailerURL;
        this.synopsis = synopsis;
        this.screenings = screenings;
    }
    
    /**
     * Returns the unique filmId associated with this Film instance.
     * 
     * @return filmId Unique integer associated with the film.
     */
    public int getFilmId()
    {
        return this.filmId;
    }
    
    public String getFilmName()
    {
        return this.name;
    }
    
    public String getSynopsis()
    {
        return synopsis;
    }
    
    public String getTrailerURL()
    {
        return trailerURL;
    }
    
    public ArrayList<BEScreening> getScreenings()
    {
        return screenings;
    }
    
    public void removeScreening(BEScreening screening){
        this.screenings.remove(screening);
    }
    
    public void addScreening(BEScreening screening){
        this.screenings.add(screening);
    }
    
    /**
     * This method checks the list of screenings currently in the database, for 
     * a screening whose value for its screeningId attribute is equal to the 
     * argument. It returns the Screening object from the list that satisfies 
     * this criteria. If an Screening object satisfying this criteria is not
     * currently in the database then this method will return null.
     * 
     * @param screeningId The screeningId of the screening wanted.
     * @return The Screening object wanted or null.
     */
    public synchronized BEScreening lookupScreening(int screeningId, boolean modifying)
    {
        for (BEScreening screening : this.screenings)
        {
            if (screening.getScreeningId() == screeningId)
            {
                if(modifying)
                {
                    this.screenings.remove(screening);
                }
                return screening;
            }
        }
        
        return null;
    }
}
