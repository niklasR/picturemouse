package picturemouse.backend;

import java.sql.Time;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 * Some of the code has been generated by StarUML(tm) Java Add-In.
 * This class is instantiated by the front-end and the methods within it 
 * will be called by the front-end to output to the user or input information
 * given by the user into the database. Allows administrators to modify 
 * details of films.
 * 
 * @version 24/02/2014
 * @author John Every
 */


public class BEModifyFilmDetails
{
    BEDatabase database = BEDatabase.getInstance();
    /**
     * This method changes the values of the attributes for a chosen film
     * to new values entered by the user. Then it saves the new film 
     * object's state into the database.
     * 
     * @param oldfilmId This corresponds to the old value of the filmId 
     *                  field for the chosen film.
     * @param newFilmId New filmId field.
     * @param newName New name field.
     * @param newTrailer New trailer field.
     * @param newSynopsis New synopsis field.
     * @param newScreenings New screenings field(elements are 
     *                      inserted, adapted or removed in front-end).
     */
    public void doIt(int filmId, String newName, 
            String newTrailer, String newSynopsis, 
            ArrayList<BEScreening> newScreenings)
    {
        BEFilm film = database.lookupFilm(filmId, true);
        film.modify(filmId, newName, newTrailer, newSynopsis, 
                                                newScreenings);
        database.save(film);
    }
    
    /**
     * This method sends all the film screenings as an array of Strings to the
     * FEBrowseScreenings form.
     * @param filmId    Indicates the filmId of the screenings of the film 
     *                  required.
     * @return Array of screenings in the form of String information 
     *         corresponding to the filmId 
     *         input. 
     */
    public String[] browseScreenings(int filmId)
    {
        BEBookTicket bE1 = new BEBookTicket();
        return bE1.findScreenings(filmId);
    }
    
    /**
     * This method adds a default screening to the list of screenings of the 
     * film corresponding to the filmId argument. The filmId is equal to the
     * current size of this list, Time is 0:00(not valid time) and Date is 
     * 00/00/00 (not valid date).
     * 
     * @param filmId 
     */
    public void addScreening(int filmId)
    {
        BEFilm filmModifying = database.lookupFilm(filmId, true);
        int screeningId = filmModifying.getScreenings().size(); 
        Time defaultTime = new Time(0, 0, 0);
        Date defaultDate = new Date(0, 0, 0);
        BEScreening newScreening = new BEScreening(screeningId, defaultTime, defaultDate, filmId, new HashMap<Integer, String>());
        filmModifying.addScreening(newScreening);
        database.save(filmModifying);
    }
    
    /**
     * Adds a film to the database.
     */
    public void addFilm()
    {
        BEFilm newFilm = new BEFilm(database.getFilms().size(), "default Film, you must modify fields.", "", "", new ArrayList<BEScreening>());
        database.save(newFilm);
    }
    
    /**
     * Modifies a screening in the database.
     * @param filmId
     * @param screeningId
     * @param screeningTime
     * @param screeningDate 
     */
    public void modifyScreening(int filmId, int screeningId, Time screeningTime, Date screeningDate)
    {
        BEFilm currentFilm = database.lookupFilm(filmId, true);
        currentFilm.lookupScreening(screeningId, true).modify(screeningTime, screeningDate);
        database.save(currentFilm);
    }
}
