package picturemouse.backend;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 * Some of the code has been generated by StarUML(tm) Java Add-In. This the 
 * database which is used to store all of the current data for the session. It
 * can look up data, save data for the current session, load data stored from
 * the last session into a file and save data to a file so that it can be 
 * accessed in other sessions. This class implements the Singleton design 
 * pattern.
 *
 * @version 24/02/2014
 * @author John Every
 * 
 */
public class BEDatabase
{
    /**
     * Static variable to hold the one instance of the Database class.
     */
    private static BEDatabase uniqueInstance;
    /**
     * An ArrayList to store the current films.
     */
    private ArrayList<BEFilm> films;
    
    /**
     * An ArrayList to store the current reviews.
     */
    private ArrayList<BEReview> reviews;
    
    /**
     * An ArrayList to store the current accounts.
     */
    private ArrayList<BEAccount> accounts;
    
    /**
     * An ArrayList to store the current newsletter.
     */
    private BENewsletter newsletter;
    
    /**
     * Private constructor for instantiating Database objects, this means that
     * only the Database class and instantiate itself.
     */
    private BEDatabase() {
        films = new ArrayList<>();
        reviews = new ArrayList<>();
        accounts = new ArrayList<>();
        newsletter = new BENewsletter();
    }
    
    /**
     * This method instantiates the Database class if it has not yet been 
     * instantiated and returns the one and only one instance of it.
     * 
     * @return The unique instance of the Database class.
     */
    public synchronized static BEDatabase getInstance()
    {
        // Checks to see if we have created the instance, if not then an 
        // instance of the Database class is instantiated.
        if (uniqueInstance == null)
        {
            uniqueInstance = new BEDatabase();
        }
        return uniqueInstance;
    }
    
    /**
     * Returns the list of films currently in the database.
     * 
     * @return List of current films stored.
     */
    public synchronized ArrayList<BEFilm> getFilms()
    {
        return this.films;
    }
    
    /**
     * Returns the list of customer accounts currently in the database.
     * 
     * @return List of current accounts stored.
     */
    public synchronized ArrayList<BEAccount> getAccounts()
    {
        return this.accounts;
    }
    
    /**
     * Returns the list of reviews currently in the database.
     * 
     * @return List of current reviews stored.
     */
    public synchronized ArrayList<BEReview> getReviews()
    {
        return this.reviews;
    }
    
    /**
     * Return the newsletter currently in the database.
     * 
     * @return Current newsletter stored.
     */
    public synchronized BENewsletter getNewsletter()
    {
        return this.newsletter;
    }
    
    /**
     * This method adds a Film object, a Review object or an Account object 
     * to its corresponding List attribute. If it is passed a Newsletter 
     * object then this is assigned to the newsletter attribute of the 
     * instance.
     * 
     * @param o Object to save to the database.
     */
    public synchronized void save(Object o)
    {
        if(o instanceof BENewsletter)
        {
            this.newsletter = (BENewsletter)o;
        }
        else if(o instanceof BEAccount)
        {
            this.accounts.add((BEAccount)o);
        }
        else if(o instanceof BEReview)
        {
            this.reviews.add((BEReview)o);
        }
        else if(o instanceof BEFilm)
        {
            this.films.add((BEFilm)o);
        }
    }
    
    /**
     * This method checks the list of films currently in the database, for a 
     * film whose value for its filmId attribute is equal to the argument. 
     * It removes the Film object from the list that satisfies this criteria 
     * if modifying is set to true and returns it. If a Film object satisfying  
     * this criteria is not currently in the database then this method will 
     * return null.
     * 
     * @param filmId The id of the wanted.
     * @param modifying This indicates whether a change is needed to the 
     *                  list of films.
     * @return The Film object wanted or null.
     */
    public synchronized BEFilm lookupFilm(int filmId, boolean modifying)
    {
	for (BEFilm film : this.films)
        {
            if (film.getFilmId() == filmId)
            {
                if(modifying)
                {
                    this.films.remove(film);
                }
                return film;
            }
        }
        
        return null;
    }
	
    /**
     * This method checks the list of reviews currently in the database, for a 
     * review whose value for its reviewId attribute is equal to the argument. 
     * It removes the Review object from the list that satisfies this criteria  
     * if modifying is set to true and returns it. If a Review object  
     * satisfying this criteria is not currently in the database then this 
     * method will return null.
     * 
     * @param reviewId The id of the review wanted.
     * @param modifying This indicates whether a change is needed to the 
     *                  list of reviews.
     * @return The Review object wanted or null.
     */
    public synchronized BEReview lookupReview(int reviewId, boolean modifying)
    {
	for (BEReview review : this.reviews)
        {
            if (review.getReviewId() == reviewId)
            {
                if(modifying)
                {
                    this.reviews.remove(review);
                }
                return review;
            }
        }
        
        return null;
    }
	
    /**
     * This method checks the list of accounts currently in the database, for 
     * an account whose value for its username attribute is equal to the 
     * argument. It removes the Account object from the list that satisfies 
     * this criteria if modifying is set to true and returns it. If an Account 
     * object satisfying this criteria is not currently in the database then 
     * this method will return null.
     * 
     * @param username The username of the account wanted.
     * @param modifying This indicates whether a change is needed to the 
     *                  list of accounts.
     * @return The Account object wanted or null.
     */
    public synchronized BEAccount lookupAccount(String username, boolean modifying)
    {
        for (BEAccount account : this.accounts)
        {
            if (account.getUsername().equals(username))
            {
                if(modifying)
                {
                    this.accounts.remove(account);
                }
                return account;
            }
        }
        
        return null;
    }
    
    /**
     * Method saves this Database's contents into a serialised file, called 
     * database.ser.
     *
     * @throws IOException
     */
    public synchronized void saveToFile() throws IOException
    {
        FileOutputStream fileOutput = null;
        ObjectOutputStream objectOutput = null;
       
        fileOutput = new FileOutputStream( "database.ser" );
        objectOutput = new ObjectOutputStream( fileOutput );
        // Saves the films, reviews and accounts objects into a file.
        objectOutput.writeObject( this.films ); 
        objectOutput.writeObject( this.reviews );
        objectOutput.writeObject( this.accounts );
        objectOutput.writeObject( this.newsletter );

        objectOutput.close();
       
    }
	
    /**
     * Method should load and replace this Database's contents with the 
     * serialised contents stored in the file called database.ser.
     *
     * @throws IOException
     * @throws ClassNotFoundException
     */
    public synchronized void loadFromFile() throws IOException, ClassNotFoundException
    {
        this.accounts = null;
        this.films = null;
        this.reviews = null;
        this.newsletter = null;
            
        FileInputStream fileInput = null;
        ObjectInputStream objectInput = null;
       
        fileInput = new FileInputStream("database.ser");
        objectInput = new ObjectInputStream( fileInput );
                
        // Loads the contents of the file and saves it into reviews, 
        // accounts and films respectively. 
        this.films = ( ArrayList<BEFilm> ) objectInput.readObject(); 
        this.reviews = ( ArrayList<BEReview> ) objectInput.readObject(); 
        this.accounts = ( ArrayList<BEAccount> ) objectInput.readObject();
        this.newsletter = ( BENewsletter ) objectInput.readObject();
                
        objectInput.close();
    }
       
}
